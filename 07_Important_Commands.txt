

# 1. Activate the virtual environment to use the dependencies installed in it
.\venv\Scripts\activate



# 2. Generate a list of installed packages and versions and save it to requirements.txt (commonly used for dependency management)
pip freeze > .\requirements.txt  

# 3. Start the frontend service defined in the docker-compose.yml file
docker-compose up frontend

# 4. Stop and remove all running containers defined in the docker-compose.yml file
# Build images for the services defined in the docker-compose.yml file without using cache
# Start up the services as specified in docker-compose.yml

docker-compose down
docker-compose build --no-cache
docker-compose up

# 5. Stop and remove all running containers defined in the docker-compose.yml file
# Rebuild images and start services, combining both commands for a fresh build and run
docker-compose down
docker-compose up --build


# 6. Start the ZooKeeper server, necessary for Kafka as it manages and coordinates Kafka brokers
.\bin\windows\zookeeper-server-start.bat .\config\zookeeper.properties

# 7. Start the Kafka server after ZooKeeper is up, which enables the Kafka messaging service
.\bin\windows\kafka-server-start.bat .\config\server.properties


# 8. Access the Redis CLI in an interactive terminal for a specific container (with ID <>) and select database number 1
docker exec -it f1716e18aae5baa4d285a9ef07595be4b0fa08fbc581f081c3fea04e04873e19 redis-cli -n 1

# 9. Display the logs for a container with the specified ID (d7e80f1407329d63687e69a12765c9935796a873a1b1ff7c570593e79ba73b4c) to check for outputs, errors, or other information
docker logs d7e80f1407329d63687e69a12765c9935796a873a1b1ff7c570593e79ba73b4c


docker-compose exec backend_django python manage.py search_index --create
docker-compose exec backend_django python manage.py search_index --populate